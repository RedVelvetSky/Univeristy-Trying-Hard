We can solve the problem by iterating through the sequence and storing the current sum of the numbers in the segment and the total sum of the sequence. At each step we check if it equals the total sum minus the current sum. If it is, we return the indexes, but if it is not and it becomes greater, we reset the current sum to the value of the next element in the array and update the initial index of the sequence. If iteration comes to the end without finding any valid segment, we return None.

Alternatively, we can go a little differently:
1. Create array of prefixes sums (it means, that k-th element is the sum of all first k elements in the array).
2. For all pairs of prefixes of the form (start index : end index), we can calculate the value by subtracting the start prefix from the sum of the prefix in the end index + 1. In this way we find all consecutive sums in the array.
3. We compare the sum of the prefixes with the sum of the elements not in the gap - i.e. with the total sum, minus the gap sum and then we have two cases:
 - They are equal and we return the start and end indices and the sum of the elements.
 - If no such sum (partition) is found, we return None.

The time complexity of this algorithm is O (n^2), the space complexity is O (n), where n is the length of the input sequence.