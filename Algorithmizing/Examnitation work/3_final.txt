b) This procedure doesn't implement the operation of removing an element with the given value from a tree correctly and that's why:
 - the given implementation of operation doesn't maintain the BST property which states that for every vertex, its left child has to be smaller then its root and right child is bigger. Generally speaking, all elements in the left subtree have values less than or equal to the value in the vertex, and all elements in the right subtree have values greater than the value in the vertex.
- When we copy the value from one vertex to another, our three may no longer be ordered and maintain BST property.
- When we remove elements, the inner structure of the tree can be changed, elements and substrees in general can also be affected.
I suppose, that if you want to correctly implement this iperation, you have to involve indetifying the vertex that will be removes and after that reordering the tree structure.

a) f(n)=O(g(n) <=> (def) 0 ≤ f(n) ≤ C1*g(n) => C1 ≥ f(n)/g(n)

log2 f(n) =? O(log2(g(n)))  0 ≤ log2 f(n) ≤ C1* log2(g(n) => C2 ≥ log2(f(n))/log2(g(n))

Now let’s try to prove, that the statement above (C2 ≥ log2(f(n))/log2(g(n)) is false. To prove it, we need to find only one pair of functions f(n) and g(n) for which log2f(n) = O(log2(g(n))) statement is false. 

To do this, let’s:
f(n) = n^2
g(n) = n

1. f(n) = n^2 => O(n^2)
log^2 f(n) = log2(n^2) = 2*log2(n)

2. g(n) = n => O(n)
log2 (g(n)) = log2(n) = 1*log2(n)

3. log2 f(n) = O(2log2 (n)) = O(log2 (n))

